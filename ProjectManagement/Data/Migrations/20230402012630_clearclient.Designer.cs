// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.Data;

#nullable disable

namespace ProjectManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230402012630_clearclient")]
    partial class clearclient
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d99140db-3986-4ed7-86d9-6b4efa8c3eea",
                            ConcurrencyStamp = "3ad1615d-b88b-4025-b90c-65e74625a31b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bf640343-7580-4f06-865f-3dc3d61867c9",
                            ConcurrencyStamp = "6bb31b32-ca6f-409d-a35b-123f6695e410",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e3e6110-fc31-4643-be02-b56b01c906f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70dbd8db-4dab-4597-8a29-d1a24cb92d32",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFyO4YOkwpetYS+DDON0MsyQ4dAP8RYz9BGZo3nr0SFMjBFomgU5Qw824pPS5/Ik6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce0cca77-f931-4a29-8530-4027d2057edf",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "f94969e5-24f6-41d2-9669-c8d6e54f50a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3e665a2-7b6d-43b7-bbc8-5e3a0885c998",
                            Email = "employee@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@GMAIL.COM",
                            NormalizedUserName = "EMPLOYEE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+0MNox5p2R0ZpSFw2CZO1D3hhK7iU4o4li0bjCM3MT8FcHpa5EA29/0TB2EFLjZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d37ea67d-83fb-4c17-b4d8-f404e29a4021",
                            TwoFactorEnabled = false,
                            UserName = "employee@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e3e6110-fc31-4643-be02-b56b01c906f5",
                            RoleId = "d99140db-3986-4ed7-86d9-6b4efa8c3eea"
                        },
                        new
                        {
                            UserId = "f94969e5-24f6-41d2-9669-c8d6e54f50a0",
                            RoleId = "bf640343-7580-4f06-865f-3dc3d61867c9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ProjectManagement.Models.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BillingRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditCardCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("MarketingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MarketingManagerMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PayRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PlacedByMemberId")
                        .HasColumnType("int");

                    b.Property<decimal>("PlacementFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RecruiterMemberId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReferralFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReferredByMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("TeamLeadFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TeamLeadMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamMemberId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueConsultantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MarketingManagerMemberId");

                    b.HasIndex("PlacedByMemberId");

                    b.HasIndex("RecruiterMemberId");

                    b.HasIndex("ReferredByMemberId");

                    b.HasIndex("TeamLeadMemberId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("ProjectManagement.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("ProjectManagement.Models.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AprBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AugBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DecBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FebBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("JanBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("JulBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("JunBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MarBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MayBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NovBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OctBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SepBilling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Models.Consultant", b =>
                {
                    b.HasOne("ProjectManagement.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "MarketingManager")
                        .WithMany("MarketingManagerInConsultants")
                        .HasForeignKey("MarketingManagerMemberId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "PlacedBy")
                        .WithMany("PlacedByInConsultants")
                        .HasForeignKey("PlacedByMemberId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "Recruiter")
                        .WithMany("RecruiterInConsultants")
                        .HasForeignKey("RecruiterMemberId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "ReferredBy")
                        .WithMany("ReferredByInConsultants")
                        .HasForeignKey("ReferredByMemberId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "TeamLead")
                        .WithMany("TeamLeadInConsultants")
                        .HasForeignKey("TeamLeadMemberId");

                    b.HasOne("ProjectManagement.Models.TeamMember", "TeamMember")
                        .WithMany("TeamMemberInConsultants")
                        .HasForeignKey("TeamMemberId");

                    b.Navigation("Client");

                    b.Navigation("MarketingManager");

                    b.Navigation("PlacedBy");

                    b.Navigation("Recruiter");

                    b.Navigation("ReferredBy");

                    b.Navigation("TeamLead");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("ProjectManagement.Models.TimeSheet", b =>
                {
                    b.HasOne("ProjectManagement.Models.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("ProjectManagement.Models.TeamMember", b =>
                {
                    b.Navigation("MarketingManagerInConsultants");

                    b.Navigation("PlacedByInConsultants");

                    b.Navigation("RecruiterInConsultants");

                    b.Navigation("ReferredByInConsultants");

                    b.Navigation("TeamLeadInConsultants");

                    b.Navigation("TeamMemberInConsultants");
                });
#pragma warning restore 612, 618
        }
    }
}
